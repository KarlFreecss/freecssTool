syntax enable
syntax on

set hlsearch
filetype on

set autoindent
set tabstop=4
set shiftwidth=4
set expandtab
set et
set smarttab

set nu
"set filetype=c
colorscheme darkblue


""""""""""""""""""""""""""""""
" Tag list (ctags)
"    """"""""""""""""""""""""""""""
let Tlist_Ctags_Cmd = 'ctags'
let Tlist_Show_One_File = 1            "不同时显示多个文件的tag，只显示当前文件的
let Tlist_Exit_OnlyWindow = 1          "如果taglist窗口是最后一个窗口，则退出vim
let Tlist_Use_Right_Window = 1         "在右侧窗口中显示taglist窗口
"TlistOpen

autocmd BufNewFile *.[ch],*.hpp,*.cpp,Makefile,*.mk,*.sh,*.py exec ":call SetTitle()"
" 加入注释
func SetComment_py()
        call setline(1,"# coding: utf-8")
        call append(line("."),   "#================================================================#")
        call append(line(".")+1,   "#   Copyright (C) ".strftime("%Y")." Freecss All rights reserved.")
        call append(line(".")+2, "#   ")
        call append(line(".")+3, "#   File Name     ：".expand("%:t"))
        call append(line(".")+4, "#   Author        ：freecss")
        call append(line(".")+5, "#   Email         ：karlfreecss@gmail.com")
        call append(line(".")+6, "#   Created Date  ：".strftime("%Y/%m/%d"))
        call append(line(".")+7, "#   Description   ：")
        call append(line(".")+8, "#")
        call append(line(".")+9, "#================================================================#")
        call append(line(".")+10, "")
        call append(line(".")+11, "")
endfunc

func SetTitle()
    if &filetype == 'python'
        call SetComment_py()
    endif
endfunc


" Vim folding file
" Language:     Python
" Author:       Jorrit Wiersma (foldexpr), Max Ischenko (foldtext), Robert
" Ames (line counts)
" Last Change:  2005 Jul 14
" Version:      2.3
" Bug fix:      Drexler Christopher, Tom Schumm, Geoff Gerrietts


setlocal foldmethod=expr
setlocal foldexpr=GetPythonFold(v:lnum)
setlocal foldtext=PythonFoldText()


function! PythonFoldText()
  let line = getline(v:foldstart)
  let nnum = nextnonblank(v:foldstart + 1)
  let nextline = getline(nnum)
  if nextline =~ '^\s\+"""$'
    let line = line . getline(nnum + 1)
  elseif nextline =~ '^\s\+"""'
    let line = line . ' ' . matchstr(nextline, '"""\zs.\{-}\ze\("""\)\?$')
  elseif nextline =~ '^\s\+"[^"]\+"$'
    let line = line . ' ' . matchstr(nextline, '"\zs.*\ze"')
  elseif nextline =~ '^\s\+pass\s*$'
    let line = line . ' pass'
  endif
  let size = 1 + v:foldend - v:foldstart
  if size < 10
    let size = " " . size
  endif
  if size < 100
    let size = " " . size
  endif
  if size < 1000
    let size = " " . size
  endif
  return size . " lines: " . line
endfunction


function! GetPythonFold(lnum)
    " Determine folding level in Python source
    "
    let line = getline(a:lnum)
    let ind  = indent(a:lnum)

    " Ignore blank lines
    if line =~ '^\s*$'
        return "="
    endif

    " Ignore triple quoted strings
    if line =~ "(\"\"\"|''')"
        return "="
    endif

    " Ignore continuation lines
    if line =~ '\\$'
        return '='
    endif

    " Support markers
    if line =~ '{{{'
        return "a1"
    elseif line =~ '}}}'
        return "s1"
    endif

    " Classes and functions get their own folds
    if line =~ '^\s*\(class\|def\)\s'
        return ">" . (ind / &sw + 1)
    endif

    let pnum = prevnonblank(a:lnum - 1)

    if pnum == 0
        " Hit start of file
        return 0
    endif

    " If the previous line has foldlevel zero, and we haven't increased
    " it, we should have foldlevel zero also
    if foldlevel(pnum) == 0
        return 0
    endif

    " The end of a fold is determined through a difference in indentation
    " between this line and the next.
    " So first look for next line
    let nnum = nextnonblank(a:lnum + 1)
    if nnum == 0
        return "="
    endif

    " First I check for some common cases where this algorithm would
    " otherwise fail. (This is all a hack)
    let nline = getline(nnum)
    if nline =~ '^\s*\(except\|else\|elif\)'
        return "="
    endif

    " Python programmers love their readable code, so they're usually
    " going to have blank lines at the ends of functions or classes
    " If the next line isn't blank, we probably don't need to end a fold
    if nnum == a:lnum + 1
        return "="
    endif

    " If next line has less indentation we end a fold.
    " This ends folds that aren't there a lot of the time, and this sometimes
    " confuses vim.  Luckily only rarely.
    let nind = indent(nnum)
    if nind < ind
        return "<" . (nind / &sw + 1)
    endif

    " If none of the above apply, keep the indentation
    return "="

endfunction

" quick mapping

map <F3> : call VarSearch()<CR>
map <F4> : call GitBlame()<CR>
map <F5> : call CompileRunGcc()<CR>
map <F6> : call OpenDualFile()<CR>

func! VarSearch()
    let a = expand("<cword>")
    let cmd = printf("!grep -n %s -r .", a)
    echom cmd
    exec cmd
endfunc

func! GitBlame()
    let lineNum = line(".")
    echom lineNum
    let upLine = max([1, lineNum - 5])
    let lowerLine = min([lineNum + 5, line("$")])
    let cmd = printf("!git blame %% -L %d,%d", upLine, lowerLine)
    echom cmd
    exec cmd
endfunc

"""""""""""""""""""""""""""""""""""""""
au! BufNewFile,BufRead *.lp setf logic
"""""""""""""""""""""""""""""""""""""""

func! CompileRunGcc()
    exec "w"
    if &filetype == 'python'
        exec "!time python3 -u %"
    endif
    if &filetype == "julia"
        exec "!time julia %"
    endif
    if &filetype == "cpp"
        exec "!time g++ -std=c++14 -g -O3 % -o %< -lpthread && time ./%<"
    endif
    if &filetype == "logic"
        exec "!time clingo % 0"
    endif
endfunc

func! OpenDualFile()
    if &filetype == "cpp"
        vsp %<.h
    elseif &filetype == "h"
        vsp %<.cpp
    else
        vsp %
    endif
endfunc
